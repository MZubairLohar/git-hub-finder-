
@mixin ag-theme-base-part-grid-layout {

    .ag-rtl {
        text-align: right;
    }

    .ag-root-wrapper {
        @include ag-border(primary, $radius: ag-param(border-radius));
    }
    
    // support 20 levels here because row group indentation is used for tree data which can be quite deep
    @for $i from 1 to 20 {
        .ag-row > .ag-cell-wrapper.ag-row-group-indent-#{$i} {
            @include ag-theme-rtl(( padding-left: ag-param(cell-horizontal-padding) + $i * ag-param(row-group-indent-size) ));
        }
        
        .ag-row-group-indent-#{$i} {
            @include ag-theme-rtl(( padding-left: $i * ag-param(row-group-indent-size) ));
        }
    }

    .ag-row-group-leaf-indent {
        @include ag-theme-rtl(( margin-left: ag-param(row-group-indent-size) ));
    }

    .ag-cell {
        -webkit-font-smoothing: subpixel-antialiased;
    }

    .ag-value-change-delta {
        padding-right: 2px;
    }

    .ag-value-change-delta-up {
        color: ag-param(value-change-delta-up-color);
    }

    .ag-value-change-delta-down {
        color: ag-param(value-change-delta-down-color);
    }

    .ag-value-change-value {
        background-color: transparent;
        border-radius: 1px;
        padding-left: 1px;
        padding-right: 1px;
        transition: background-color 1s;
    }

    .ag-value-change-value-highlight {
        background-color: ag-param(value-change-value-highlight-background-color);
        transition: background-color 0.1s;
    }

    .ag-cell-data-changed {
        background-color: ag-param(value-change-value-highlight-background-color) !important;
    }

    .ag-cell-data-changed-animation {
        background-color: transparent;
        transition: background-color 1s;
    }

    .ag-cell-highlight {
        background-color: ag-param(range-selection-highlight-color) !important;
    }

    .ag-cell-highlight-animation {
        transition: background-color 1s;
    }

    .ag-row {
        height: ag-param(row-height);
        background-color: ag-param(background-color);
        color: ag-param(data-color);
        
        @if ag-param(row-border-color) and ag-param(borders-critical) {
            // NOTE: we define border-width and border-color at .ag-row level and only set
            // border-style inside nested pseudoclass selectors, to allow derived themes
            // to override border-width on .ag-row
            border: none 1px ag-param(row-border-color);

            &:not(.ag-row-first) {
                border-top-style: solid;
            }
            &.ag-row-last {
                border-bottom-style: solid;
            }
        }
    }

    .ag-row-highlight-above::after, .ag-row-highlight-below::after {
        content: '';
        position: absolute;
        width: 100%;
        height: 1px;
        background-color: ag-param(range-selection-border-color);
        left: 1px;
    }

    .ag-row-highlight-above::after {
        top: -2px;
    }

    .ag-row-highlight-above.ag-row-first::after {
        top: 0;
    }

    .ag-row-highlight-below::after {
        bottom: 0px;
    }

    @if ag-param(odd-row-background-color) {
        .ag-row-odd {
            background-color: ag-param(odd-row-background-color);
        }
    }

    // NOTE: these don't need an RTL version because the "left spacer" is always the one visually on the left
    .ag-horizontal-left-spacer:not(.ag-scroller-corner) {
        @include ag-border(critical, right);
    }
    .ag-horizontal-right-spacer:not(.ag-scroller-corner) {
        @include ag-border(critical, left);
    }

    .ag-row-hover {
        background-color: ag-param(row-hover-color);
    }

    .ag-numeric-cell {
        @include ag-theme-rtl(( text-align: right ));
    }

    // right-align numeric values in cells with wrappers
    .ag-numeric-cell .ag-cell-value {
        @include ag-theme-rtl(( margin-left: auto ));
    }

    .ag-cell {
        // draw a transparent border so that the cell size doesn't change when we add a range border
        border: 1px solid transparent;
        // adjust for transparent border
        line-height: ag-param(row-height) - 2px;
        padding-left: ag-param(cell-horizontal-padding) - 1px;
        padding-right: ag-param(cell-horizontal-padding) - 1px;
    }

    // in full width rows, a cell renderer is rendered directly into a row with no cell in between,
    // in which case we need to apply the padding to the cell renderer's wrapper.
    .ag-row > .ag-cell-wrapper {
        padding-left: ag-param(cell-horizontal-padding) - 1px;
        padding-right: ag-param(cell-horizontal-padding) - 1px;
    }

    .ag-row-dragging {
        cursor: move;
    }

    .ag-row-dragging {
        opacity: 0.5;
    }

    .ag-cell-inline-editing {
        @include ag-card();
        padding: 0;
        height: ag-param(row-height);
        background-color: ag-param(control-panel-background-color);
    }

    .ag-popup-editor {
        @include ag-card();
        background-color: ag-param(control-panel-background-color);
        padding: 0;
    }

    .ag-large-text-input {
        height: auto;
        padding: ag-param(cell-horizontal-padding);
    }

    .ag-details-row {
        padding: ag-param(grid-size) * 5;
        background-color: ag-param(background-color);
    }

    .ag-overlay-loading-wrapper {
        background-color: rgba(ag-param(background-color), 0.66);
    }

    .ag-overlay-loading-center {
        @include ag-card();
    }

    // in auto-height mode with no rows, add padding to prevent grid being too small
    .ag-overlay-no-rows-wrapper.ag-layout-auto-height {
        padding-top: 30px;
    }

    .ag-loading {
        padding-left: ag-param(cell-horizontal-padding);
        display: flex;
        height: 100%;
        align-items: center;
    }

    .ag-loading-icon {
        padding-right: ag-param(cell-widget-spacing);
    }

    .ag-icon-loading {
        animation-name: spin;
        animation-duration: 1000ms;
        animation-iteration-count: infinite;
        animation-timing-function: linear;
    }

    @keyframes spin {
        from {
            transform: rotate(0deg);
        }
        to {
            transform: rotate(360deg);
        }
    }

    .ag-floating-top {
        @include ag-border(critical, bottom);
    }
    .ag-floating-bottom {
        @include ag-border(critical, top);
    }
}
